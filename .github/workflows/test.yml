name: Daily Scrum Notification

on:
  schedule:
    # 한국 시간 오전 10시에 실행 (UTC 기준 새벽 1시)
    # 분 시 일 월 요일
    - cron: '0 1 * * *'
  # 수동 실행을 위한 옵션 (Actions 탭에서 직접 실행 가능)
  workflow_dispatch:

jobs:
  notify_discord:
    runs-on: ubuntu-latest
    # 리포지토리 권한 설정 (이슈, PR 읽기)
    permissions:
      issues: read
      pull-requests: read
    steps:
      - name: Checkout repository # 코드 체크아웃
        uses: actions/checkout@v4

      - name: Fetch Open Issues # 열려있는 이슈 목록 가져오기 (최대 30개)
        id: issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_list=$(gh issue list --state open --limit 30 --json number,title,url)
          echo "Raw issue list: $issue_list" # 디버깅 로그
          if [[ "$(echo "$issue_list" | jq '. | length')" -gt 0 ]]; then
            formatted_issues=$(echo "$issue_list" | jq -r '.[] | "- (#\(.number)) \(.title) - <\(.url)>"')
          else
            formatted_issues="- 열려있는 이슈가 없습니다."
          fi
          echo "Formatted issues: $formatted_issues" # 디버깅 로그
          echo "ISSUE_LIST<<EOF" >> $GITHUB_ENV
          echo "$formatted_issues" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Fetch Open PRs # 열려있는 PR 목록 가져오기 (최대 30개)
        id: prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_list=$(gh pr list --state open --limit 30 --json number,title,url)
          echo "Raw PR list: $pr_list" # 디버깅 로그
          if [[ "$(echo "$pr_list" | jq '. | length')" -gt 0 ]]; then
            formatted_prs=$(echo "$pr_list" | jq -r '.[] | "- (#\(.number)) \(.title) - <\(.url)>"')
          else
            formatted_prs="- 열려있는 PR이 없습니다."
          fi
          echo "Formatted PRs: $formatted_prs" # 디버깅 로그
          echo "PR_LIST<<EOF" >> $GITHUB_ENV
          echo "$formatted_prs" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Construct Discord Message # Discord 메시지 조합
        id: message
        run: |
          TODAY=$(date +'%Y-%m-%d')
          MESSAGE="## ☀️ ${TODAY} 데일리 스크럼 안내 ☀️\n\n"
          MESSAGE+="**⏰ 오늘 오전 데일리 스크럼 시간입니다!**\n\n"
          MESSAGE+="**현재 열려있는 이슈:**\n$ISSUE_LIST\n\n" # $ISSUE_LIST 앞뒤 공백 제거 가능성 고려
          MESSAGE+="**현재 열려있는 Pull Requests:**\n$PR_LIST\n\n" # $PR_LIST 앞뒤 공백 제거 가능성 고려
          MESSAGE+="잠시 하던 일을 멈추고 각자 진행 상황과 이슈를 공유해주세요! 😊"
          echo "Constructed Message Content: $MESSAGE" # 디버깅 로그
          
          JSON_PAYLOAD=$(jq -nc --arg content "$MESSAGE" '{"content": $content}')
          echo "Generated JSON_PAYLOAD: $JSON_PAYLOAD" # 디버깅 로그
          echo "JSON_PAYLOAD=$JSON_PAYLOAD" >> $GITHUB_ENV

      - name: Send Notification to Discord # Discord로 알림 보내기
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "Attempting to send notification to Discord."
          echo "Using Webhook URL (first 30 chars): $(echo $DISCORD_WEBHOOK_URL | cut -c 1-30)..." # URL 일부만 출력 (보안)
          echo "Payload being sent: $JSON_PAYLOAD" # 디버깅 로그
          
          # curl 명령어 실행 및 결과 출력 (오류 확인 용이)
          curl_response_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          "${DISCORD_WEBHOOK_URL}")
          
          echo "Discord API Response Code: $curl_response_code"
          
          if [[ "$curl_response_code" -ge 200 && "$curl_response_code" -lt 300 ]]; then
            echo "Notification sent successfully!"
          else
            echo "Error sending notification. Response code: $curl_response_code"
            # 상세 오류를 보고 싶다면 -v 옵션을 추가하거나, -o output.txt 로 응답 본문을 파일에 저장하여 확인할 수 있습니다.
            # 예: curl -v -X POST ...
            exit 1 # 실패 시 워크플로우 실패 처리
          fi
